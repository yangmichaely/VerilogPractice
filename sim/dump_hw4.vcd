$date
	Fri Apr  5 20:04:56 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module average $end
$var wire 32 ! avg [31:0] $end
$var wire 1 " clk $end
$var wire 32 # in [31:0] $end
$var wire 1 $ overflow $end
$var wire 1 % ready $end
$upscope $end
$scope module divider $end
$var wire 1 & clk $end
$var wire 32 ' dividend [31:0] $end
$var wire 32 ( divisor [31:0] $end
$var wire 32 ) quotient [31:0] $end
$var wire 32 * remainder [31:0] $end
$upscope $end
$scope module factorial $end
$var wire 32 + factorial [31:0] $end
$var wire 1 , overflow $end
$var wire 1 - ready $end
$var wire 32 . val [31:0] $end
$upscope $end
$scope module hw4_tb $end
$var wire 3 / out [2:0] $end
$var reg 3 0 a [2:0] $end
$var reg 3 1 b [2:0] $end
$var reg 3 2 c [2:0] $end
$var reg 1 3 clk $end
$var reg 3 4 expected [2:0] $end
$var integer 32 5 test_num [31:0] $end
$scope module my_max $end
$var wire 3 6 a [2:0] $end
$var wire 3 7 b [2:0] $end
$var wire 3 8 c [2:0] $end
$var wire 3 9 max [2:0] $end
$upscope $end
$scope begin $unm_blk_5 $end
$var integer 32 : expected_file [31:0] $end
$var integer 32 ; out_file [31:0] $end
$upscope $end
$upscope $end
$scope module queue $end
$var wire 32 < in [31:0] $end
$var wire 32 = out [31:0] $end
$var wire 1 > queue_empty $end
$var wire 1 ? queue_full $end
$var wire 1 @ signal $end
$upscope $end
$scope module stream $end
$var wire 1 A clk $end
$var wire 32 B first_stream [31:0] $end
$var wire 32 C running_sum [31:0] $end
$var wire 32 D second_stream [31:0] $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bz D
bz C
bz B
zA
z@
z?
z>
bz =
bz <
b10 ;
b100 :
b101 9
b1 8
b100 7
b101 6
b1 5
b101 4
03
b1 2
b100 1
b101 0
b101 /
bz .
z-
z,
bz +
bz *
bz )
bz (
bz '
z&
z%
z$
bz #
z"
bz !
$end
#1
b11 /
b11 9
b11 4
b0 2
b0 8
b11 1
b11 7
b10 0
b10 6
b10 5
13
#2
03
#3
13
